package vn.vnpt_tech.airquality.air_quality_monitoring.controller;

import nl.martijndwars.webpush.Subscription;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import vn.vnpt_tech.airquality.air_quality_monitoring.entity.PushSubscription;
import vn.vnpt_tech.airquality.air_quality_monitoring.repository.PushSubscriptionRepository;
import vn.vnpt_tech.airquality.air_quality_monitoring.service.PushNotificationService;

import java.util.concurrent.CompletableFuture;

@RestController
@RequestMapping("/api/notifications")
public class PushNotificationController {
    @Autowired
    private PushNotificationService pushNotificationService;

    @Autowired
    private PushSubscriptionRepository pushSubscriptionRepository;

    @PostMapping("/register")
    public void registerSubscription(@RequestBody Subscription subscription) {
        // Save the subscription in the database (mapping it to PushSubscription)
        PushSubscription pushSubscription = new PushSubscription(
                null, // The ID will be auto-generated by JPA
                subscription.endpoint,
                new PushSubscription.Keys(subscription.keys.p256dh, subscription.keys.auth)
        );

        pushSubscriptionRepository.save(pushSubscription);

        // For demo purposes, send a test notification
//        pushNotificationService.sendPushNotification(subscription, "Test: AQI level is high! Take precautions.");
    }
   // Endpoint to trigger a notification (e.g., when AQI exceeds a threshold)
   @PostMapping("/send-notification")
   public ResponseEntity<String> sendNotification(@RequestBody String message) {
       CompletableFuture.runAsync(() -> {
           pushSubscriptionRepository.findAll().forEach(subscription -> {
               Subscription webPushSubscription = new Subscription(
                       subscription.getEndpoint(),
                       new Subscription.Keys(subscription.getKeys().getP256dh(), subscription.getKeys().getAuth())
               );
               pushNotificationService.sendPushNotification(webPushSubscription, message);
           });
       });

       return ResponseEntity.ok("Notification processing started");
   }

}